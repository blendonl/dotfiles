;;; treesit-fold-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from treesit-fold.el

(autoload 'treesit-fold-mode "treesit-fold" "\
Folding code using tree sitter.

This is a minor mode.  If called interactively, toggle the `Treesit-Fold
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `treesit-fold-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-treesit-fold-mode 'globalized-minor-mode t)
(defvar global-treesit-fold-mode nil "\
Non-nil if Global Treesit-Fold mode is enabled.
See the `global-treesit-fold-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-treesit-fold-mode'.")
(custom-autoload 'global-treesit-fold-mode "treesit-fold" nil)
(autoload 'global-treesit-fold-mode "treesit-fold" "\
Toggle Treesit-Fold mode in all buffers.
With prefix ARG, enable Global Treesit-Fold mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Treesit-Fold mode is enabled in all buffers where
`treesit-fold--trigger' would do it.

See `treesit-fold-mode' for more information on Treesit-Fold mode.

(fn &optional ARG)" t)
(autoload 'treesit-fold-line-comment-mode "treesit-fold" "\
Enable line comment folding.

This is a minor mode.  If called interactively, toggle the
`Treesit-Fold-Line-Comment mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `treesit-fold-line-comment-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'treesit-fold-close "treesit-fold" "\
Fold the syntax node at `point` if it is foldable.

Foldable nodes are defined in `treesit-fold-range-alist' for the
current `major-mode'.

If no NODE is found in point, do nothing.

(fn &optional NODE)" t)
(autoload 'treesit-fold-open "treesit-fold" "\
Open the fold of the syntax node in which `point' resides.
If the current node is not folded or not foldable, do nothing." t)
(autoload 'treesit-fold-open-recursively "treesit-fold" "\
Open recursively folded syntax NODE that are contained in the node at point." t)
(autoload 'treesit-fold-close-all "treesit-fold" "\
Fold all foldable syntax nodes in the buffer." t)
(autoload 'treesit-fold-open-all "treesit-fold" "\
Unfold all syntax nodes in the buffer." t)
(autoload 'treesit-fold-toggle "treesit-fold" "\
Toggle the syntax node at `point'.
If the current syntax node is not foldable, do nothing." t)


;;; Generated autoloads from treesit-fold-indicators.el

(autoload 'treesit-fold-indicators-mode "treesit-fold-indicators" "\
Minor mode for display fringe folding indicators.

This is a minor mode.  If called interactively, toggle the
`Treesit-Fold-Indicators mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `treesit-fold-indicators-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-treesit-fold-indicators-mode 'globalized-minor-mode t)
(defvar global-treesit-fold-indicators-mode nil "\
Non-nil if Global Treesit-Fold-Indicators mode is enabled.
See the `global-treesit-fold-indicators-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-treesit-fold-indicators-mode'.")
(custom-autoload 'global-treesit-fold-indicators-mode "treesit-fold-indicators" nil)
(autoload 'global-treesit-fold-indicators-mode "treesit-fold-indicators" "\
Toggle Treesit-Fold-Indicators mode in all buffers.
With prefix ARG, enable Global Treesit-Fold-Indicators mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Treesit-Fold-Indicators mode is enabled in all buffers where
`treesit-fold-indicators--trigger' would do it.

See `treesit-fold-indicators-mode' for more information on
Treesit-Fold-Indicators mode.

(fn &optional ARG)" t)
(autoload 'treesit-fold-indicators-refresh "treesit-fold-indicators" "\
Refresh indicators for all folding range.

(fn &rest _)")

;;; End of scraped data

(provide 'treesit-fold-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; treesit-fold-autoloads.el ends here
